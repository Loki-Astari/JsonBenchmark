#!/bin/bash

CWD=$(pwd)

export PATH="${PATH}:$(pwd)/build/bin"
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:$(pwd)/build/lib:/usr/local/lib:${CWD}/thirdparty/ThorsSerializer/build/lib/"
export DYLD_LIBRARY_PATH="${DYLD_LIBRARY_PATH}:$(pwd)/build/lib:/usr/local/lib:${CWD}/thirdparty/ThorsSerializer/build/lib/"

export OS=$1

if [[ "${OS}" == "" ]]; then
    export OS=$(uname -s | awk -F- '{print $1}')
fi

if [[ ${OS} == "Linux" ]]; then
    dateAt="-d @"
fi
if [[ "${OS}" == "Darwin" ]]; then
    dateAt="-r "
fi

rootDir=$(pwd)

echo "Library,First Commit,Last Commit,Tested Version, Latest Version,Language Type,Stars" > Stats.csv
benchmark20 --titleOnly Conformance.csv Performance.csv
for parser in $(benchmark20 --listParser); do
    for filter in $(benchmark20 --listTests); do
        benchmark20 --append --filter=${filter} --parser=${parser} Conformance.csv Performance.csv
        if [[ $? != 0 ]]; then
            benchmark20 --append --filter=${filter} --parser=${parser} --markFailed Conformance.csv Performance.csv
            r=$?
            if [[ $r != 0 ]]; then 
                echo "Big Issue: $? ${parser} ${filter}"
                exit 1
            fi
        fi
    done
    cd thirdparty/${parser}

    gitInfo=$(git remote  get-url origin)

    first=$(git log --reverse --pretty=%ct | head -1)
    echo date ${dateAt}${first} '+"%c"'
    firstOrdered=$(date ${dateAt}${first} +"%c")
    echo "firstOrdered:         ${firstOrdered}"
    firstOrderNumeric=$(date ${dateAt}${first} +"%F")
    echo "firstOrderNumeric:    ${firstOrderNumeric}"

    last=$(git log --pretty=%ct | head -1)
    echo "last:                 ${last}"
    lastOrdered=$(date ${dateAt}${last} +"%c")
    echo "lastOrdered:          ${lastOrdered}"
    lastOrderNumeric=$(date ${dateAt}${last} +"%F")
    echo "lastOrderNumeric:     ${lastOrderNumeric}"

    typeOfLib=$(benchmark20 --parser=${parser} --parserType)
    echo "typeOfLib:            ${typeOfLib}"

    gitInfo1=${gitInfo#https://github.com/}
    echo "gitInfo1:             ${gitInfo1}"
    gitInfo2=${gitInfo1%.*}
    echo "gitInfo2:             ${gitInfo2}"
    gitUser=${gitInfo2%/*}
    echo "gitUser:              ${gitUser}"
    gitRepo=${gitInfo2#*/}
    echo "gitRepo:              ${gitRepo}"
    stars=$(curl -s "https://api.github.com/repos/${gitUser}/${gitRepo}?page=$i&per_page=100" | jq '.stargazers_count // 0')
    echo "stars:                ${stars}"

    tags=$(git rev-list --tags --max-count=1)
    echo "tags:                 ${tags}"
    gitLatestVersion=""
    if [[ "${tags}" != "" ]]; then
        gitLatestVersion=$(git describe --tags ${tags})
    fi
    echo "gitLatestVersion:     ${gitLatestVersion}"

    tagsOld=$(git rev-parse HEAD)
    echo "tagsOld:              ${tagsOld}"
    getCurrentVersion=""
    if [[ "${tagsOld}" != "" ]]; then
        getCurrentVersion=$(git describe --tags ${tagsOld} 2> /dev/null)
    fi
    echo "getCurrentVersion:    ${getCurrentVersion}"


    cd ${rootDir}

    echo "${parser}, ${firstOrderNumeric}, ${lastOrderNumeric}, ${getCurrentVersion}, ${gitLatestVersion}, ${typeOfLib}, ${stars}"
    echo "${parser}, ${firstOrderNumeric}, ${lastOrderNumeric}, ${getCurrentVersion}, ${gitLatestVersion}, ${typeOfLib}, ${stars}" >> Stats.csv

done

cat Stats.csv

if [[ "${OS}" == "Darwin" ]]; then
    php ./script/stats.php       Stats.csv          > Stats.html
fi

echo
echo
echo "Saving For: ${OS}"
echo
echo
php ./script/conformance.php Conformance.csv > Conformance.${OS}.html
php ./script/performance.php Performance.csv > Performance.${OS}.html
echo "Complete"


