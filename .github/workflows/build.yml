name:       Build
run-name:   ${{ github.actor }} Building
on:
    push:
        branches:
            - master
jobs:
        #  windows-latest
        #  windows-2022
        #  windows-2019
        #  ubuntu-latest
        #  ubuntu-22.04
        #  ubuntu-20.04
        #  ubuntu-18.04
        #  macos-latest
        #  macos-13
        #  macos-12
        #  macos-11
    Build_on_Mac:
        runs-on:    macos-latest
        steps:
            - name: Generate a token
              id: generate-token
              uses: actions/create-github-app-token@v1
              with:
                app-id: ${{ vars.JSONBENCHMARKUPDATER }}
                private-key: ${{ secrets.JSONBENCHMARKUPDATER_SECRET }}
            - name: Checkout Project
              uses: actions/checkout@master
              with:
                submodules: recursive
                token: ${{ secrets.GITHUB_TOKEN }}
            - name: Install Dependencies
              run: |
                env HOMEBREW_NO_AUTO_UPDATE=1 brew install boost
            - name: Run Configure
              run: |
                ./configure --disable-vera
                ./init3rdParty
            - name: Make
              run: make
            - run: ./runTests
            - name: Update Results
              env:
                GH_TOKEN: ${{ steps.generate-token.outputs.token }}
              run: |
                ./save osx
    Build_on_Linux:
        runs-on:    ubuntu-latest
        steps:
            - name: Generate a token
              id: generate-token
              uses: actions/create-github-app-token@v1
              with:
                app-id: ${{ vars.JSONBENCHMARKUPDATER }}
                private-key: ${{ secrets.JSONBENCHMARKUPDATER_SECRET }}
            - name: Checkout Project
              uses: actions/checkout@master
              with:
                submodules: recursive
                token: ${{ secrets.GITHUB_TOKEN }}
            - name: Install Dependencies
              run: |
                sudo apt-get install libboost-all-dev
            - name: Install brew
              run: |
                echo "1"
                /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
                echo "1"
                test -d ~/.linuxbrew && eval $(~/.linuxbrew/bin/brew shellenv)
                echo "2"
                test -d /home/linuxbrew/.linuxbrew && eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
                echo "3"
                echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.profile
                echo "4"
                echo "::add-path::/home/linuxbrew/.linuxbrew/bin"
                echo "5"
                brew --version
                echo "6"
            - name: Verify brew
              run: brew --version
            - name: Run Configure
              run: |
                ./configure --disable-vera
                ./init3rdParty
            - name: Make
              run: make
            - run: ./runTests
            - name: Update Results
              env:
                GH_TOKEN: ${{ steps.generate-token.outputs.token }}
              run: |
                ./save linux
#    Build_on_Windows:
#        runs-on:    windows-latest
#        steps:
#            - name: Generate a token
#              id: generate-token
#              uses: actions/create-github-app-token@v1
#              with:
#                app-id: ${{ vars.JSONBENCHMARKUPDATER }}
#                private-key: ${{ secrets.JSONBENCHMARKUPDATER_SECRET }}
#            - run:  git config --global core.autocrlf input
#            - name: Checkout Project
#              uses: actions/checkout@master
#              with:
#                submodules: recursive
#                token: ${{ secrets.GITHUB_TOKEN }}
#            - name: Install Sys-Dependencies
#              uses: msys2/setup-msys2@v2
#              with:
#                install: >-
#                    autoconf
#                    automake
#                    make
#                    git
#                    gperf
#                    coreutils
#                    vim
#                    mingw-w64-x86_64-gcc
#                    mingw-w64-x86_64-gdb
#                    mingw-w64-x86_64-libyaml
#                    mingw-w64-x86_64-dlfcn
#                    mingw-w64-x86_64-snappy
#                    mingw-w64-x86_64-boost
#                    mingw-w64-x86_64-cmake
#            - name: Install Dependencies
#              shell: msys2 {0}
#              run: |
#                git clone https://github.com/Neargye/magic_enum.git /tmp/magic_enum
#            - name: Run Configure
#              shell: msys2 {0}
#              run: |
#                ./configure --disable-vera --disable-colour --with-magicenum-header-only-root=/tmp/magic_enum/include/magic_enum
#                ./init3rdParty
#            - name: Make
#              shell: msys2 {0}
#              env:
#                ThorsSerializerTest_CXXFLAGS: "-I /tmp/magic_enum/include/magic_enum"
#              run: make
#            - run: ./runTests
#            - name: Update Results
#              shell: msys2 {0}
#              env:
#                GH_TOKEN: ${{ steps.generate-token.outputs.token }}
#              run: |
#                ./save windows
    Combine_Results:
#        needs:      [Build_on_Mac, Build_on_Linux, Build_on_Windows]
        needs:      [Build_on_Mac, Build_on_Linux]
        runs-on:    macos-latest
        steps:
            - name: Generate a token
              id: generate-token
              uses: actions/create-github-app-token@v1
              with:
                app-id: ${{ vars.JSONBENCHMARKUPDATER }}
                private-key: ${{ secrets.JSONBENCHMARKUPDATER_SECRET }}
            - name: Install Dependencies
              run: |
                env HOMEBREW_NO_AUTO_UPDATE=1 brew install php
            - name: Checkout Project
              uses: actions/checkout@master
              with:
                token: ${{ secrets.GITHUB_TOKEN }}
            - name: Publish Results
              env:
                GH_TOKEN: ${{ steps.generate-token.outputs.token }}
              run: |
                success

